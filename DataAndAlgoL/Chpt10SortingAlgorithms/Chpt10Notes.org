* Sorting Algorithms
    >> Arranges the elements of a list in a certain order (descending or ascending)
    Output is a permutation or reordering of the input
    ** Often used for database algorithms and searches

    * Classification of sorting algorithms 
        ** By number of comparisons
            Best case is O(nlogn) and worst case is O(n^2)
    
    * Internal sort:
        sort algorithms that use main memory exclusively during the sort called internal sorting. This alfgorithm assummes high speed random access to all memory

    * External Sort:
        sorting algorithms that use external memory, during the sort.

    ** BUBBLE SORT
        Simplest sorting algorithm.
        *** Works by iterating the input array from the 1st element to the last, comparing each pair of elements and swapping them if needed.
        Bubble sort continues its iterations until no more swaps are needed.
        Has high complexity time and is too Simplest
        ** Only significant advantage of bubble sort is detecting whether input list is sorted or not 
        complexity = O(n^2)
        
    ** SELECTION SORT
        *** Works well for small files. Used to sort very large values with very small keys. Because selecyion is made based on keys and swaps are made only when required 
            Advantages: 
                Easy to implement 
                in-place sort (requires no additional storage space)
            Disadvantages:
                does not scale well O(n^2)
        *** Algorithm used as:
            1. finding the minimum value in the list 
            2. swap it with the value in the current position
            3. repeat process for all elements until the entire array is sorted
    
    ** INSERTION SORT !! -> WATCH VIDEO ABOUT INSERTION SORT
        simple and efficient comparison sort. 
        ** Each iteration removes an element from the input data and inserts it into the correct position in the list being sorted. 
            ** The choice of the element being removed from the input is random and this process is repeated until all elements are sorted.
        ** ADVANTAGES:
            simple implementation 
            efficient for small data
            adaptive: if the input list is presorted [may not be completely] the insertions sort takes O(n+d), where d is the number of inversions.
            Pratically more efficient than selection sort and bubble sort, even tho all of them have O(n^2) worst case complexity
            stable: maintains relative order of input data if the keys are the same
            in-place: it requires only a constant  amount O(1) of additional memory space 
            Online: insertion sort can sort the list as it receives it
        ** ALGORITHM:
            - Every repetition of insertion removes an element from the input data, and inserts it into the correct position in the already sorted list until no input elements remain.
            - Sorting is typically done in-place. The resulting array after k iterations has the property where the first k+1 entries are sorted 

    ** SHELL SORT (DIMINISHING INCREMENT SORT)
        >> generalization of insertion sort.
        *** NOTE -> Insertion sort works efficiently on input that is already almost sorted
        >> SHELL SORT AKA *N-gap* insertion sort. 
        ** Instead of comparing only the adjacent pair, shell sort makes several passes and uses various gaps between adjacent elements, ending with the gap of 1 or classical insertion sort 
        ** Variation used in shell sort is to avoid comparing adjacent elements until the last step of the algorithm, meaning last step of the shell sort is insertion sort algorithm
        ** Fastes of all O(N^2) algorithms  

    ** MERGE SORT
        >> Important example of divide and conquer 
        *** IMPORTANT NOTES:
            *merging* -> process of combining 2 sorted files to make one bigger sorted file 
            *selection* -> process of dividing a file into 2 parts: k smallest element and n - k largest elements 
            *Selection and Merging* -> 2 opposite operations:
                selection splits the list into 2 lists 
                merging joins 2 list to make 1 list 
            *Merge Sort -> is Quick Sort's complement* and accesses the data in sequential order 
            ** NOTE -> this algorithm is used for sorting a LINKED LIST 
            ** Insensitive to the initial order of its input 
            *** NOTE -> Merge sort divides the list into 2 parts, each part is conquered individually.
            *** Merge sort starts with the small sublists and finishes with the largest list. As a result does not need a stack
            ** Stable alfgorithm

    ** QUICK SORT 
        ** Example of divide and conquer algorithm. AKA Paritition Exchange Sort -> Uses recursive calls for sorting elements
        *** NOTE: One of the famous algorithms among comparison-based sorting algorithms 
        ** STEPS: 
            ** DIVIDE: Array[low...high]is partitioned into 2 non-empty subarrays Array[low... pivot] and Array[pivot+1... high] 
                ** Such that each element of Array[low... high] is less than or equal to each element of Array[pivot+1... high]
                ** PIVOT index is calculated as part of the partitioning procedure   
            ** CONQUER:
                ** The 2 subarrays Array[low... pivot] and Array[pivot+1... high] are sorted by recursive calls 
        ** ALGORITHM:
            *** 1. If there are 1 or no elements in the array to be sorted return.
            *** 2. Pick and element in the array to serve as the PIVOT point. (USUALLY THE LEFT MOST ELEMENT IN THE ARRAY IS USED)
            *** 3. Split the array into 2 parts- 1 with elements larger than the pivot, other with elements smaller than the PIVOT
            *** 4. Recursively repeat the algorithm for both halves of the original array 
            
    ** HEAP SORT
